{"version":3,"file":"static/js/842.0cd6df66.chunk.js","mappings":"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","sources":["webpack://social_network/./src/components/Messages/Messages.module.css?8e7e","webpack://social_network/./src/components/Messages/MessageList/MessageList.module.css?ae33","components/Messages/MessageList/MessageList.tsx","components/Messages/Dialog/Dialog.module.css","webpack://social_network/./src/components/Messages/Dialog/SendMessage/SendMessage.module.css?3cb9","components/Messages/Dialog/SendMessage/SendMessage.tsx","components/Messages/Dialog/Dialog.tsx","components/Messages/Messages.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Messages_content__wNDBY\",\"active\":\"Messages_active__pElvi\"};","// extracted by mini-css-extract-plugin\nexport default {\"MessageList\":\"MessageList_MessageList__LxXPb\"};","import React from \"react\";\r\nimport classes from \"./MessageList.module.css\";\r\nimport UserMessage from \"../../UserMessage/UserMessage.tsx\";\r\n\r\nimport logo from './../../UI/Images/logo.png'\r\nimport { MessagesListDataType } from \"../../../redux/types/types.ts\";\r\n\r\ntype MessageListPropsType = {\r\n  MessagesData: Array<MessagesListDataType> | MessagesListDataType\r\n}\r\n\r\nconst MessageList: React.FC<MessageListPropsType> = (props) => {\r\n  const messagesArray = Array.isArray(props.MessagesData) ? \r\n      props.MessagesData : \r\n      [props.MessagesData];\r\n  const Messsages = messagesArray.map((message) => (\r\n    <UserMessage\r\n      link={\"true\"}\r\n      name={message.userName}\r\n      logo={message.photos.small ? message.photos.small : logo}\r\n      id={message.id}\r\n      key={message.id} />\r\n  ));\r\n  return <div className={classes.MessageList}>{Messsages}</div>;\r\n};\r\n\r\nexport default MessageList;\r\n","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"SendMessage\":\"SendMessage_SendMessage__Yz56f\"};","import React, { useState } from \"react\";\r\nimport classes from \"./SendMessage.module.css\";\r\nimport MyInput from \"../../../UI/Input/MyInput.tsx\";\r\nimport MyButton from \"../../../UI/Button/MyButton.tsx\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { MessagesActionsTypes, sendMessage } from \"../../../../redux/messagesReducer.ts\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { ThunkDispatch } from \"redux-thunk\";\r\nimport { AppStateType } from \"../../../../redux/storeRedux.ts\";\r\n\r\ntype FormValuesType = {\r\n  messageText: string\r\n}\r\n\r\ntype SendMessagePropsType = {\r\n  friendId: number\r\n  login: string | null\r\n}\r\n\r\nconst SendMessage: React.FC<SendMessagePropsType> = (props) => {\r\n  const dispatch: ThunkDispatch<AppStateType, void, MessagesActionsTypes> = useDispatch()\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm<FormValuesType>({});\r\n\r\n  const submit = (data) => {\r\n    if (data.messageText.trim() !== \"\") {\r\n      dispatch(sendMessage(props.friendId, data.messageText));      \r\n      reset()\r\n    }\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit(submit)} className={classes.SendMessage}>\r\n      <MyInput\r\n        iserror={undefined} holder=\"Message\"\r\n        {...register('messageText', { required: true })}\r\n        autoComplete=\"off\"      />\r\n      <MyButton\r\n        name=\"Send\"\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SendMessage;\r\n","import React from \"react\";\r\nimport classes from \"./Dialog.module.css\";\r\nimport UserMessage from \"../../UserMessage/UserMessage.tsx\";\r\nimport SendMessage from \"./SendMessage/SendMessage.tsx\";\r\nimport \"moment/locale/ru\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport logo from \"././../../UI/Images/logo.png\";\r\nimport { DialogData, SendMessageDataType } from \"../../../redux/types/types.ts\";\r\nimport { deleteMessage } from \"../../../redux/messagesReducer.ts\";\r\n\r\ntype DialogPropsType = {\r\n  login: string | null;\r\n  DialogData: {\r\n    items: Array<SendMessageDataType>;\r\n  } | DialogData;\r\n}\r\n\r\nconst Dialog: React.FC<DialogPropsType> = (props) => {\r\n  const moment = require('moment-timezone')\r\n  const { userId } = useParams();\r\n\r\n  const Dialog =\r\n    props.DialogData &&\r\n    props.DialogData.items &&\r\n    props.DialogData.items.length > 0\r\n      ? props.DialogData?.items.map((dialog) => (\r\n          <UserMessage\r\n          isDeletable={true}\r\n          viewed={dialog.viewed}\r\n          message={dialog.body}\r\n          name={dialog.senderName}\r\n          logo={logo}\r\n          messageId={dialog.id}\r\n          id={dialog.senderId}\r\n          key={dialog.id}\r\n          deleteMessage={deleteMessage}\r\n          time={moment.utc(dialog.addedAt).tz('Europe/Moscow').format('YYYY-MM-DD HH:mm')}\r\n         />\r\n        ))\r\n      : null;\r\n\r\n  return userId ? (\r\n    <div>\r\n      <div className={classes.message}>{Dialog}</div>\r\n      <SendMessage\r\n        friendId={Number(userId)}\r\n        login={props.login}\r\n      />\r\n    </div>\r\n  ) : null;\r\n};\r\n\r\nexport default Dialog;\r\n","import React, { useEffect } from \"react\";\r\nimport classes from \"./Messages.module.css\";\r\nimport MessageList from \"./MessageList/MessageList.tsx\";\r\nimport Dialog from \"./Dialog/Dialog.tsx\";\r\nimport Preloader from \"../UI/Preloader/Preloader\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppStateType } from \"../../redux/storeRedux.ts\";\r\nimport {\r\n  getDialog,\r\n  getMessages,\r\n  MessagesActionsTypes,\r\n} from \"../../redux/messagesReducer.ts\";\r\nimport { ThunkDispatch } from \"redux-thunk\";\r\nimport withAuth from \"../hoc/withAuth.tsx\";\r\n\r\nconst Messages: React.FC = () => {\r\n  const { userId } = useParams();\r\n  const isLogined = useSelector((s: AppStateType) => s.login.isLogined);\r\n  const isFetching = useSelector((s: AppStateType) => s.messages.isFetching);\r\n  const messagesData = useSelector(\r\n    (s: AppStateType) => s.messages.MessagesData\r\n  );\r\n  const dialogData = useSelector((s: AppStateType) => s.messages.DialogData);\r\n  const login = useSelector((s: AppStateType) => s.login.login);\r\n  const dispatch: ThunkDispatch<AppStateType, void, MessagesActionsTypes> =\r\n    useDispatch();\r\n  useEffect(() => {\r\n    if (isLogined) {\r\n      dispatch(getMessages());\r\n      if (userId) {\r\n        dispatch(getDialog(Number(userId)));\r\n      }\r\n    }\r\n  }, [userId]);\r\n\r\n  return isFetching ? (\r\n    <Preloader />\r\n  ) : (\r\n    <div className={classes.content}>\r\n      <MessageList MessagesData={messagesData} />\r\n      <Dialog login={login} DialogData={dialogData} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withAuth(Messages);\r\n"],"names":["props","Messsages","Array","isArray","MessagesData","map","message","_jsx","UserMessage","link","name","userName","logo","photos","small","id","className","classes","children","dispatch","useDispatch","register","handleSubmit","reset","formState","errors","useForm","_jsxs","onSubmit","data","messageText","trim","sendMessage","friendId","MyInput","iserror","undefined","holder","required","autoComplete","MyButton","_props$DialogData","moment","require","userId","useParams","Dialog","DialogData","items","length","dialog","isDeletable","viewed","body","senderName","messageId","senderId","deleteMessage","time","utc","addedAt","tz","format","SendMessage","Number","login","withAuth","Messages","isLogined","useSelector","s","isFetching","messages","messagesData","dialogData","useEffect","getMessages","getDialog","Preloader","MessageList"],"sourceRoot":""}