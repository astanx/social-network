{"version":3,"file":"static/js/516.41652164.chunk.js","mappings":"2JACA,QAA0B,0BCA1B,EAA8B,iC,iCCU9B,MAeA,EAfqDA,IACnD,MAGMC,GAHgBC,MAAMC,QAAQH,EAAMI,cACtCJ,EAAMI,aACN,CAACJ,EAAMI,eACoBC,KAAKC,IAClCC,EAAAA,EAAAA,KAACC,EAAAA,EAAW,CACVC,KAAM,OACNC,KAAMJ,EAAQK,SACdC,KAAMN,EAAQO,OAAOC,MAAQR,EAAQO,OAAOC,MAAQF,EACpDG,GAAIT,EAAQS,GACKC,aAAa,GAAzBV,EAAQS,MAEjB,OAAOR,EAAAA,EAAAA,KAAA,OAAKU,UAAWC,EAAoBC,SAAElB,GAAe,ECtB9D,GAAiB,E,4CCgBjB,MAkCA,EAlC2CD,IAAW,IAADoB,EACnD,MAAMC,EAASC,EAAQ,OACjB,OAAEC,IAAWC,EAAAA,EAAAA,KAEbC,EACJzB,EAAM0B,YACN1B,EAAM0B,WAAWC,OACjB3B,EAAM0B,WAAWC,MAAMC,OAAS,EACZ,QADaR,EAC7BpB,EAAM0B,kBAAU,IAAAN,OAAA,EAAhBA,EAAkBO,MAAMtB,KAAKwB,IAC3BtB,EAAAA,EAAAA,KAACC,EAAAA,EAAW,CACZQ,aAAa,EACbc,OAAQD,EAAOC,OACfxB,QAASuB,EAAOE,KAChBrB,KAAMmB,EAAOG,WACbpB,KAAMA,EACNqB,UAAWJ,EAAOd,GAClBA,GAAIc,EAAOK,SAEXC,cAAeA,EAAAA,GACfC,KAAMf,EAAOgB,IAAIR,EAAOS,SAASC,GAAG,iBAAiBC,OAAO,qBAFvDX,EAAOd,MAKd,KAEN,OAAOQ,GACLkB,EAAAA,EAAAA,MAAA,OAAAtB,SAAA,EACEZ,EAAAA,EAAAA,KAAA,OAAKU,UAAWC,EAAQZ,QAAQa,SAAEM,KAClClB,EAAAA,EAAAA,KAACmC,EAAAA,EAAW,CACVC,SAAUC,OAAOrB,GACjBsB,MAAO7C,EAAM6C,MAAOC,QAAIC,OAE1B,IAAI,E,wBC/BV,MA8BA,GAAeC,E,QAAAA,IA9BY/C,KACzB,MAAM,OAAEsB,IAAWC,EAAAA,EAAAA,KACbyB,GAAYC,EAAAA,EAAAA,KAAaC,GAAoBA,EAAEN,MAAMI,YACrDG,GAAaF,EAAAA,EAAAA,KAAaC,GAAoBA,EAAEE,SAASD,aACzDE,GAAeJ,EAAAA,EAAAA,KAClBC,GAAoBA,EAAEE,SAASjD,eAE5BmD,GAAaL,EAAAA,EAAAA,KAAaC,GAAoBA,EAAEE,SAAS3B,aACzDmB,GAAQK,EAAAA,EAAAA,KAAaC,GAAoBA,EAAEN,MAAMA,QACjDW,GACJC,EAAAA,EAAAA,MAUF,OATAC,EAAAA,EAAAA,YAAU,KACJT,IACFO,GAASG,EAAAA,EAAAA,OACLpC,GACFiC,GAASI,EAAAA,EAAAA,IAAUhB,OAAOrB,KAE9B,GACC,CAACA,IAEG6B,GACL7C,EAAAA,EAAAA,KAACsD,EAAAA,EAAS,KAEVpB,EAAAA,EAAAA,MAAA,OAAKxB,UAAWC,EAAgBC,SAAA,EAC9BZ,EAAAA,EAAAA,KAACuD,EAAW,CAAC1D,aAAckD,KAC3B/C,EAAAA,EAAAA,KAACkB,EAAM,CAACoB,MAAOA,EAAOnB,WAAY6B,MAErC,G","sources":["webpack://social_network/./src/components/Messages/Messages.module.css?8e7e","webpack://social_network/./src/components/Messages/MessageList/MessageList.module.css?ae33","components/Messages/MessageList/MessageList.tsx","components/Messages/Dialog/Dialog.module.css","components/Messages/Dialog/Dialog.tsx","components/Messages/Messages.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Messages_content__wNDBY\",\"active\":\"Messages_active__pElvi\"};","// extracted by mini-css-extract-plugin\nexport default {\"MessageList\":\"MessageList_MessageList__LxXPb\"};","import React from \"react\";\r\nimport classes from \"./MessageList.module.css\";\r\nimport UserMessage from \"../../UserMessage/UserMessage.tsx\";\r\n\r\nimport logo from './../../UI/Images/logo.png'\r\nimport { MessagesListDataType } from \"../../../redux/types/types.ts\";\r\n\r\ntype MessageListPropsType = {\r\n  MessagesData: Array<MessagesListDataType> | MessagesListDataType\r\n}\r\n\r\nconst MessageList: React.FC<MessageListPropsType> = (props) => {\r\n  const messagesArray = Array.isArray(props.MessagesData) ? \r\n      props.MessagesData : \r\n      [props.MessagesData];\r\n  const Messages = messagesArray.map((message) => (\r\n    <UserMessage\r\n      link={\"true\"}\r\n      name={message.userName}\r\n      logo={message.photos.small ? message.photos.small : logo}\r\n      id={message.id}\r\n      key={message.id} isDeletable={false} />\r\n  ));\r\n  return <div className={classes.MessageList}>{Messages}</div>;\r\n};\r\n\r\nexport default MessageList;\r\n","// extracted by mini-css-extract-plugin\nexport default {};","import React from \"react\";\r\nimport classes from \"./Dialog.module.css\";\r\nimport UserMessage from \"../../UserMessage/UserMessage.tsx\";\r\nimport SendMessage from \"./SendMessage/SendMessage.tsx\";\r\nimport \"moment/locale/ru\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport logo from \"././../../UI/Images/logo.png\";\r\nimport { DialogData, SendMessageDataType } from \"../../../redux/types/types.ts\";\r\nimport { deleteMessage } from \"../../../redux/messagesReducer.ts\";\r\n\r\ntype DialogPropsType = {\r\n  login: string | null;\r\n  DialogData: {\r\n    items: Array<SendMessageDataType>;\r\n  } | DialogData;\r\n}\r\n\r\nconst Dialog: React.FC<DialogPropsType> = (props) => {\r\n  const moment = require('moment-timezone')\r\n  const { userId } = useParams();\r\n\r\n  const Dialog =\r\n    props.DialogData &&\r\n    props.DialogData.items &&\r\n    props.DialogData.items.length > 0\r\n      ? props.DialogData?.items.map((dialog) => (\r\n          <UserMessage\r\n          isDeletable={true}\r\n          viewed={dialog.viewed}\r\n          message={dialog.body}\r\n          name={dialog.senderName}\r\n          logo={logo}\r\n          messageId={dialog.id}\r\n          id={dialog.senderId}\r\n          key={dialog.id}\r\n          deleteMessage={deleteMessage}\r\n          time={moment.utc(dialog.addedAt).tz('Europe/Moscow').format('YYYY-MM-DD HH:mm')}\r\n         />\r\n        ))\r\n      : null;\r\n\r\n  return userId ? (\r\n    <div>\r\n      <div className={classes.message}>{Dialog}</div>\r\n      <SendMessage\r\n        friendId={Number(userId)}\r\n        login={props.login} ws={undefined}      />\r\n    </div>\r\n  ) : null;\r\n};\r\n\r\nexport default Dialog;\r\n","import React, { useEffect } from \"react\";\r\nimport classes from \"./Messages.module.css\";\r\nimport MessageList from \"./MessageList/MessageList.tsx\";\r\nimport Dialog from \"./Dialog/Dialog.tsx\";\r\nimport Preloader from \"../UI/Preloader/Preloader\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppStateType } from \"../../redux/storeRedux.ts\";\r\nimport {\r\n  getDialog,\r\n  getMessages,\r\n  MessagesActionsTypes,\r\n} from \"../../redux/messagesReducer.ts\";\r\nimport { ThunkDispatch } from \"redux-thunk\";\r\nimport withAuth from \"../hoc/withAuth.tsx\";\r\n\r\nconst Messages: React.FC = () => {\r\n  const { userId } = useParams();\r\n  const isLogined = useSelector((s: AppStateType) => s.login.isLogined);\r\n  const isFetching = useSelector((s: AppStateType) => s.messages.isFetching);\r\n  const messagesData = useSelector(\r\n    (s: AppStateType) => s.messages.MessagesData\r\n  );\r\n  const dialogData = useSelector((s: AppStateType) => s.messages.DialogData);\r\n  const login = useSelector((s: AppStateType) => s.login.login);\r\n  const dispatch: ThunkDispatch<AppStateType, void, MessagesActionsTypes> =\r\n    useDispatch();\r\n  useEffect(() => {\r\n    if (isLogined) {\r\n      dispatch(getMessages());\r\n      if (userId) {\r\n        dispatch(getDialog(Number(userId)));\r\n      }\r\n    }\r\n  }, [userId]);\r\n\r\n  return isFetching ? (\r\n    <Preloader />\r\n  ) : (\r\n    <div className={classes.content}>\r\n      <MessageList MessagesData={messagesData} />\r\n      <Dialog login={login} DialogData={dialogData} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withAuth(Messages);\r\n"],"names":["props","Messages","Array","isArray","MessagesData","map","message","_jsx","UserMessage","link","name","userName","logo","photos","small","id","isDeletable","className","classes","children","_props$DialogData","moment","require","userId","useParams","Dialog","DialogData","items","length","dialog","viewed","body","senderName","messageId","senderId","deleteMessage","time","utc","addedAt","tz","format","_jsxs","SendMessage","friendId","Number","login","ws","undefined","withAuth","isLogined","useSelector","s","isFetching","messages","messagesData","dialogData","dispatch","useDispatch","useEffect","getMessages","getDialog","Preloader","MessageList"],"sourceRoot":""}