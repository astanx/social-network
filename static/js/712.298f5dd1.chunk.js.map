{"version":3,"file":"static/js/712.298f5dd1.chunk.js","mappings":"qKACA,SAAgB,QAAU,uBAAuB,WAAa,0BAA0B,KAAO,oBAAoB,QAAU,wB,uGCmC7H,MA6FA,GAAeA,EAAAA,EAAAA,KALUC,IAAK,CAC5BC,UAAWD,EAAME,MAAMD,UACvBE,QAASH,EAAME,MAAMC,WAGiB,CAAEC,KAAI,KAAEC,WAAU,KAAEH,MAAM,MAAlE,EA7FwCI,IAAsD,IAArD,UAAEL,EAAS,QAAEE,EAAO,MAAED,EAAK,WAAEG,EAAU,KAAED,GAAME,EACtF,MAAMC,GAAWC,EAAAA,EAAAA,OACVC,EAAgBC,IAAqBC,EAAAA,EAAAA,WAAS,IAC9CC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAwB,OAExD,SACJG,EAAQ,aACRC,EACAC,WAAW,OAAEC,KACXC,EAAAA,EAAAA,OAEJC,EAAAA,EAAAA,YAAU,KACJlB,GACFM,EAAS,WACX,GACC,CAACN,EAAWM,IAqBf,OACEa,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAQC,QAAQC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,WACJJ,EAAAA,EAAAA,MAAA,QAAMC,UAAWC,EAAQI,KAAMC,SAAUZ,GAtB9Ba,UACbf,EAAe,MAEf,IAAK,IAADgB,EAAAC,EACF,MAAMC,QAAiB7B,EAAM8B,IACjB,OAARD,QAAQ,IAARA,GAAc,QAANF,EAARE,EAAUC,YAAI,IAAAH,OAAN,EAARA,EAAgBI,cAAeC,EAAAA,GAAWC,iBAC5CzB,GAAkB,GAClBL,MACiB,OAAR0B,QAAQ,IAARA,GAAc,QAAND,EAARC,EAAUC,YAAI,IAAAF,OAAN,EAARA,EAAgBG,cAAeC,EAAAA,GAAWE,SACnDhC,IACAG,EAAS,aAETM,EAAe,YAEnB,CAAE,MAAOwB,GACPxB,EAAe,oBACjB,KAMgEW,SAAA,EAC5DC,EAAAA,EAAAA,KAACa,EAAAA,EAAS,CACRD,QAASpB,EAAOsB,MAChBC,MAAM,QACNC,QAAQ,WACRC,KAAK,WACD5B,EAAS,QAAS,CAAE6B,UAAU,MAEnC1B,EAAOsB,QAASd,EAAAA,EAAAA,KAAA,KAAGJ,UAAWC,EAAQe,MAAMb,SAAC,4BAE9CC,EAAAA,EAAAA,KAACa,EAAAA,EAAS,CACRD,QAASpB,EAAO2B,SAChBJ,MAAM,WACNC,QAAQ,WACRC,KAAK,cACD5B,EAAS,WAAY,CAAE6B,UAAU,MAEtC1B,EAAO2B,WAAYnB,EAAAA,EAAAA,KAAA,KAAGJ,UAAWC,EAAQe,MAAMb,SAAC,4BAEjDC,EAAAA,EAAAA,KAACoB,EAAAA,EAAS,CAAArB,UACRC,EAAAA,EAAAA,KAACqB,EAAAA,EAAgB,CACfN,MAAM,cACNO,SAAStB,EAAAA,EAAAA,KAACuB,EAAAA,EAAQ,IAAKlC,EAAS,oBAInCL,IACCW,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAQnB,QAAQqB,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,OAAKwB,IAAK9C,EAAS+C,IAAI,aACvBzB,EAAAA,EAAAA,KAACa,EAAAA,EAAS,CACRD,QAASpB,EAAOd,QAChBqC,MAAM,UACNC,QAAQ,cACJ3B,EAAS,UAAW,CAAE6B,UAAU,MAErC1B,EAAOd,UAAWsB,EAAAA,EAAAA,KAAA,KAAGJ,UAAWC,EAAQe,MAAMb,SAAC,8BAInDZ,IAAea,EAAAA,EAAAA,KAAA,KAAGJ,UAAWC,EAAQe,MAAMb,SAAEZ,KAE9Ca,EAAAA,EAAAA,KAAC0B,EAAAA,EAAM,CAACV,QAAQ,YAAYC,KAAK,SAAQlB,SAAC,gBAIxC,G","sources":["webpack://social_network/./src/components/Login/Login.module.css?3530","components/Login/Login.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Login_content__Or5pz\",\"rememberMe\":\"Login_rememberMe__q-h5T\",\"form\":\"Login_form__csKgm\",\"captcha\":\"Login_captcha__VnIl7\"};","import React, { useEffect, useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport classes from \"./Login.module.css\";\r\n\r\nimport Button from \"@mui/material/Button\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { auth, getCaptcha, login } from \"../../redux/loginReducer.ts\";\r\nimport { ResultCode } from \"../../api/api.ts\";\r\nimport {\r\n  Checkbox,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  TextField,\r\n} from \"@mui/material\";\r\n\r\ntype FormValuesType = {\r\n  email: string;\r\n  password: string;\r\n  captcha: string;\r\n  rememberMe: boolean;\r\n};\r\n\r\ntype LoginPropsType = {\r\n  isLogined: boolean;\r\n  captcha: string | undefined;\r\n  login: (data: {\r\n    email: string;\r\n    password: string;\r\n    rememberMe: boolean;\r\n    captcha: string | null;\r\n  }) => any;\r\n  getCaptcha: () => void;\r\n  auth: () => void;\r\n};\r\n\r\nconst Login: React.FC<LoginPropsType> = ({ isLogined, captcha, login, getCaptcha, auth }) => {\r\n  const navigate = useNavigate();\r\n  const [captchaVisible, setCaptchaVisible] = useState(false);\r\n  const [serverError, setServerError] = useState<string | null>(null);\r\n  \r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm<FormValuesType>();\r\n\r\n  useEffect(() => {\r\n    if (isLogined) {\r\n      navigate(\"/profile\");\r\n    }\r\n  }, [isLogined, navigate]);\r\n\r\n  const submit = async (data: FormValuesType) => {\r\n    setServerError(null);\r\n\r\n    try {\r\n      const response = await login(data);\r\n      if (response?.data?.resultCode === ResultCode.RequiredCaptcha) {\r\n        setCaptchaVisible(true);\r\n        getCaptcha();\r\n      } else if (response?.data?.resultCode === ResultCode.Success) {\r\n        auth();\r\n        navigate(\"/profile\");\r\n      } else {\r\n        setServerError(\"Try again\");\r\n      }\r\n    } catch (error) {\r\n      setServerError(\"An error occurred\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.content}>\r\n      <h3>Login</h3>\r\n      <form className={classes.form} onSubmit={handleSubmit(submit)}>\r\n        <TextField\r\n          error={!!errors.email}\r\n          label=\"Email\"\r\n          variant=\"outlined\"\r\n          type=\"email\"\r\n          {...register(\"email\", { required: true })}\r\n        />\r\n        {errors.email && <p className={classes.error}>This field is required</p>}\r\n\r\n        <TextField\r\n          error={!!errors.password}\r\n          label=\"Password\"\r\n          variant=\"outlined\"\r\n          type=\"password\"\r\n          {...register(\"password\", { required: true })}\r\n        />\r\n        {errors.password && <p className={classes.error}>This field is required</p>}\r\n\r\n        <FormGroup>\r\n          <FormControlLabel\r\n            label=\"Remember me\"\r\n            control={<Checkbox {...register(\"rememberMe\")} />}\r\n          />\r\n        </FormGroup>\r\n\r\n        {captchaVisible && (\r\n          <div className={classes.captcha}>\r\n            <img src={captcha} alt=\"Captcha\" />\r\n            <TextField\r\n              error={!!errors.captcha}\r\n              label=\"Captcha\"\r\n              variant=\"outlined\"\r\n              {...register(\"captcha\", { required: true })}\r\n            />\r\n            {errors.captcha && <p className={classes.error}>This field is required</p>}\r\n          </div>\r\n        )}\r\n\r\n        {serverError && <p className={classes.error}>{serverError}</p>}\r\n\r\n        <Button variant=\"contained\" type=\"submit\">\r\n          Submit\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isLogined: state.login.isLogined,\r\n  captcha: state.login.captcha,\r\n});\r\n\r\nexport default connect(mapStateToProps, { auth, getCaptcha, login })(Login);"],"names":["connect","state","isLogined","login","captcha","auth","getCaptcha","_ref","navigate","useNavigate","captchaVisible","setCaptchaVisible","useState","serverError","setServerError","register","handleSubmit","formState","errors","useForm","useEffect","_jsxs","className","classes","content","children","_jsx","form","onSubmit","async","_response$data","_response$data2","response","data","resultCode","ResultCode","RequiredCaptcha","Success","error","TextField","email","label","variant","type","required","password","FormGroup","FormControlLabel","control","Checkbox","src","alt","Button"],"sourceRoot":""}