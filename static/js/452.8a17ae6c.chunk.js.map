{"version":3,"file":"static/js/452.8a17ae6c.chunk.js","mappings":"qIACA,QAA2B,2B,aCM3B,MAQA,EAR2CA,IAEvCC,EAAAA,EAAAA,KAAA,UAAQC,UAAWC,KAAsBH,EAAKI,SAC3CJ,EAAMK,M,6CCTb,QAAwB,uBAAxB,EAAuD,uB,aCOvD,MAYA,GAZgBC,EAAAA,EAAAA,aAAyC,CAAAC,EAAqBC,KAAS,IAA7B,OAACC,KAAWT,GAAMO,EAE1E,OACEN,EAAAA,EAAAA,KAAA,SACAO,IAAKA,EACLN,UAAW,GAAGC,KAAiBH,EAAMU,QAAUP,EAAgB,QAC3DH,EACJW,YAAaF,GACX,G,uCCfN,QAAuB,0BAAvB,EAA2F,4BAA3F,EAAiI,6BAAjI,EAA4K,iCAA5K,EAAsN,4BAAtN,EAAiQ,kCAAjQ,EAAiT,iC,0CCsBjT,MA4CA,EA5CoDT,IAElD,MAAMY,EAAYZ,EAAMY,WAAa,EAC/BC,GAAoEC,EAAAA,EAAAA,MACpEC,EAAOA,KACXC,EAAAA,EAAAA,MAAA,OAAKd,UAAWC,EAAgBC,SAAA,EAC9BH,EAAAA,EAAAA,KAAA,OAAKgB,IAAKjB,EAAMkB,KAAMhB,UAAWC,KACjCa,EAAAA,EAAAA,MAAA,OAAKd,UAAWC,EAAaC,SAAA,EAC3BY,EAAAA,EAAAA,MAAA,OAAAZ,SAAA,EACEH,EAAAA,EAAAA,KAAA,QAAAG,SAAOJ,EAAMK,QACbJ,EAAAA,EAAAA,KAAA,QAAAG,SAAOJ,EAAMmB,OACZnB,EAAMoB,aACTnB,EAAAA,EAAAA,KAAA,QAAMC,UAAWC,EAAgBkB,QAASA,IAAMR,GAASS,EAAAA,EAAAA,IAAcV,IAAYR,SAAC,MAClF,SAEFH,EAAAA,EAAAA,KAAA,KAAAG,SAAIJ,EAAMuB,gBAKhB,OAAOvB,EAAMwB,MACXvB,EAAAA,EAAAA,KAACwB,EAAAA,GAAO,CACNC,GAAI,aAAa1B,EAAM2B,KACvBN,QAASA,KACPR,GAASe,EAAAA,EAAAA,IAAU5B,EAAM2B,IAAI,EAC7BvB,UAEFH,EAAAA,EAAAA,KAACc,EAAI,OAGPC,EAAAA,EAAAA,MAAA,OAAKd,UAAWC,EAAoBC,SAAA,EAClCH,EAAAA,EAAAA,KAACc,EAAI,IACJf,EAAMY,WACPX,EAAAA,EAAAA,KAAA,KAAGC,UAAWC,EAAeC,SAC1BJ,EAAM6B,QACL5B,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAsBc,I,q0SAAaa,IAAI,YAEvD7B,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAsBc,I,ygOAAaa,IAAI,aAErD,OAET,C,sEC3DH,MAgBA,EAhBkBC,GAES/B,IACvB,MAAMgC,GAAYC,EAAAA,EAAAA,KAAaC,GAAoBA,EAAEC,MAAMH,YAErDI,GAAWC,EAAAA,EAAAA,MAMjB,OALAC,EAAAA,EAAAA,YAAU,KACHN,GACHI,EAAS,SACX,GACC,CAACJ,EAAWI,KACRnC,EAAAA,EAAAA,KAAC8B,EAAgB,IAAK/B,GAAS,C","sources":["webpack://social_network/./src/components/UI/Button/MyButton.module.css?d4f4","components/UI/Button/MyButton.tsx","webpack://social_network/./src/components/UI/Input/MyInput.module.css?18b8","components/UI/Input/MyInput.tsx","webpack://social_network/./src/components/UserMessage/UserMessage.module.css?d361","components/UserMessage/UserMessage.tsx","components/hoc/withAuth.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"MyButton\":\"MyButton_MyButton__CeT00\"};","import React from \"react\";\r\nimport classes from \"./MyButton.module.css\";\r\n\r\ntype MyButtonProps =   {\r\n  name: string\r\n} & React.ButtonHTMLAttributes<HTMLButtonElement>\r\n\r\nconst MyButton: React.FC<MyButtonProps> = (props) => {\r\n  return (\r\n    <button className={classes.MyButton} {...props}>\r\n      {props.name}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default MyButton;","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"MyInput_input__537b-\",\"error\":\"MyInput_error__klO6M\"};","import React, { forwardRef } from \"react\";\r\nimport classes from \"./MyInput.module.css\";\r\n\r\ntype InputProps = {\r\n  holder: string\r\n  iserror: string | undefined\r\n} & React.InputHTMLAttributes<HTMLInputElement>\r\n\r\nconst MyInput = forwardRef<HTMLInputElement, InputProps>(({holder, ...props}, ref) => {\r\n\r\n  return (\r\n    <input\r\n    ref={ref}\r\n    className={`${classes.input} ${props.iserror ? classes.error : ''}`}\r\n    {...props}\r\n    placeholder={holder}\r\n    />\r\n  );\r\n});\r\n\r\nexport default MyInput;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"user\":\"UserMessage_user__bqMk4\",\"logo\":\"UserMessage_logo__4q0Z8\",\"delete\":\"UserMessage_delete__02DOw\",\"message\":\"UserMessage_message__AZf+w\",\"messageCont\":\"UserMessage_messageCont__0VPdE\",\"viewed\":\"UserMessage_viewed__xQiNt\",\"viewedStatus\":\"UserMessage_viewedStatus__hRTgS\",\"logoMessage\":\"UserMessage_logoMessage__kUGtV\"};","import React from \"react\";\r\nimport classes from \"./UserMessage.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport viewed from \"./../UI/Images/viewed.png\";\r\nimport sended from \"./../UI/Images/sended.png\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { ThunkDispatch } from \"redux-thunk\";\r\nimport { AppStateType } from \"../../redux/storeRedux\";\r\nimport { deleteMessage, getDialog, MessagesActionsTypes } from \"../../redux/messagesReducer.ts\";\r\n\r\ntype UserMessagePropsType = {\r\n  isDeletable: any;\r\n  logo: string;\r\n  name: string;\r\n  time?: string;\r\n  deleteMessage?: (id: number) => void;\r\n  messageId?: number | undefined;\r\n  message?: string;\r\n  link?: string;\r\n  id: number;\r\n  viewed?: boolean;\r\n}\r\n\r\nconst UserMessage: React.FC<UserMessagePropsType>= (props) => {\r\n\r\n  const messageId = props.messageId || 2\r\n  const dispatch: ThunkDispatch<AppStateType, void, MessagesActionsTypes> = useDispatch()\r\n  const User = () => (\r\n    <div className={classes.message}>\r\n      <img src={props.logo} className={classes.logoMessage} />\r\n      <div className={classes.user}>\r\n        <div>\r\n          <span>{props.name}</span>\r\n          <span>{props.time}</span>\r\n          {props.isDeletable ? (\r\n        <span className={classes.delete} onClick={() => dispatch(deleteMessage(messageId))}>X</span>\r\n      ) : null}\r\n        </div>\r\n        <p>{props.message}</p>\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n  return props.link ? (\r\n    <NavLink\r\n      to={`/messages/${props.id}`}\r\n      onClick={() => {\r\n        dispatch(getDialog(props.id));\r\n      }}\r\n    >\r\n      <User />\r\n    </NavLink>\r\n  ) : (\r\n    <div className={classes.messageCont}>\r\n      <User />\r\n      {props.messageId ? \r\n      <p className={classes.viewed}>\r\n        {props.viewed ? (\r\n          <img className={classes.viewedStatus} src={viewed} alt=\"viewed\" />\r\n        ) :(\r\n          <img className={classes.viewedStatus} src={sended} alt=\"sended\" />\r\n        )}\r\n      </p>: null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserMessage;\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { AppStateType } from \"../../redux/storeRedux\";\r\n\r\nconst withAuth = (WrappedComponent) => {\r\n  \r\n  let WithAuthComponent = (props) => {\r\n    const isLogined = useSelector((s: AppStateType) => s.login.isLogined)\r\n\r\n    const navigate = useNavigate();\r\n    useEffect(() => {\r\n      if (!isLogined) {\r\n        navigate(\"/login\");\r\n      }\r\n    }, [isLogined, navigate]);\r\n    return <WrappedComponent {...props} />;\r\n  };\r\n  return WithAuthComponent;\r\n};\r\n\r\nexport default withAuth;\r\n"],"names":["props","_jsx","className","classes","children","name","forwardRef","_ref","ref","holder","iserror","placeholder","messageId","dispatch","useDispatch","User","_jsxs","src","logo","time","isDeletable","onClick","deleteMessage","message","link","NavLink","to","id","getDialog","viewed","alt","WrappedComponent","isLogined","useSelector","s","login","navigate","useNavigate","useEffect"],"sourceRoot":""}