{"version":3,"file":"static/js/712.e7c86551.chunk.js","mappings":"qKACA,SAAgB,QAAU,uBAAuB,WAAa,0BAA0B,KAAO,oBAAoB,QAAU,wB,uGCqI7H,SAAeA,EAAAA,EAAAA,KAPQC,IACd,CACLC,UAAWD,EAAME,MAAMD,UACvBE,QAASH,EAAME,MAAMC,WAIe,CAAEC,KAAI,KAAEC,WAAU,KAAEH,MAAM,MAAlE,EAlGyCI,IACvC,MAAMC,GAAWC,EAAAA,EAAAA,OAEVC,EAAgBC,IAAqBC,EAAAA,EAAAA,WAAS,IAC9CC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAwB,OAExD,SACJG,EAAQ,aACRC,EACAC,WAAW,OAAEC,KACXC,EAAAA,EAAAA,IAAwB,CAAC,IAE7BC,EAAAA,EAAAA,YAAU,KACJb,EAAML,WACRM,EAAS,WACX,GACC,CAACD,EAAML,UAAWM,IAmBrB,OACEa,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAQC,QAAQC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,WACJJ,EAAAA,EAAAA,MAAA,QAAMC,UAAWC,EAAQI,KAAMC,SAAUZ,GApB7Ba,IACdf,EAAe,MACfP,EAAMJ,MAAM0B,GAAMC,MAAMC,IAClBA,EAASF,KAAKG,aAAeC,EAAAA,GAAWC,kBAC1CvB,GAAkB,GAClBJ,EAAMD,cAGJyB,EAASF,KAAKG,aAAeC,EAAAA,GAAWE,SAC1C3B,EAAS,YACTD,EAAMF,QAENS,EAAe,gQACjB,GACA,IAM8DW,SAAA,EAC5DC,EAAAA,EAAAA,KAACU,EAAAA,EAAS,CACRC,QAASnB,EAAOoB,MAChBC,GAAG,iBACHC,MAAM,QACNC,QAAQ,WACRC,KAAK,WACD3B,EAAS,QAAS,CAAE4B,UAAU,MAEnCzB,EAAOoB,QAASZ,EAAAA,EAAAA,KAAA,KAAGJ,UAAWC,EAAQc,MAAMZ,SAAC,oHAE9CC,EAAAA,EAAAA,KAACU,EAAAA,EAAS,CACRC,QAASnB,EAAO0B,SAChBL,GAAG,iBACHC,MAAM,WACNC,QAAQ,WACRC,KAAK,cACD3B,EAAS,WAAY,CAAE4B,UAAU,MAEtCzB,EAAO0B,WAAYlB,EAAAA,EAAAA,KAAA,KAAGJ,UAAWC,EAAQc,MAAMZ,SAAC,oHAEjDC,EAAAA,EAAAA,KAACmB,EAAAA,EAAS,CAAApB,UACRC,EAAAA,EAAAA,KAACoB,EAAAA,EAAgB,CACfN,MAAM,eACNO,SAASrB,EAAAA,EAAAA,KAACsB,EAAAA,EAAQ,OACdjC,EAAS,kBAIhBL,GACCW,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAQnB,QAAQqB,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,OAAKuB,IAAK1C,EAAMH,QAAS8C,IAAI,aAC7BxB,EAAAA,EAAAA,KAACU,EAAAA,EAAS,CACRC,QAASnB,EAAOd,QAChBmC,GAAG,iBACHC,MAAM,UACNC,QAAQ,cACJ1B,EAAS,UAAW,CAAE4B,UAAU,MAErCzB,EAAOd,UAAWsB,EAAAA,EAAAA,KAAA,KAAGJ,UAAWC,EAAQc,MAAMZ,SAAC,sHAEhD,KAEHZ,IAAea,EAAAA,EAAAA,KAAA,KAAGJ,UAAWC,EAAQc,MAAMZ,SAAEZ,KAE9Ca,EAAAA,EAAAA,KAACyB,EAAAA,EAAM,CAACV,QAAQ,YAAYC,KAAK,SAAQjB,SAAC,gBAIxC,G","sources":["webpack://social_network/./src/components/Login/Login.module.css?3530","components/Login/Login.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Login_content__Or5pz\",\"rememberMe\":\"Login_rememberMe__q-h5T\",\"form\":\"Login_form__csKgm\",\"captcha\":\"Login_captcha__VnIl7\"};","import React, { useEffect, useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport classes from \"./Login.module.css\";\r\n\r\nimport Button from \"@mui/material/Button\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { auth, getCaptcha, login } from \"../../redux/loginReducer.ts\";\r\nimport { ResultCode } from \"../../api/api.ts\";\r\nimport {\r\n  Checkbox,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  TextField,\r\n} from \"@mui/material\";\r\n\r\ntype FormValuesType = {\r\n  email: string;\r\n  password: string;\r\n  captcha: string;\r\n  rememberMe: boolean;\r\n};\r\n\r\ntype LoginPropsType = {\r\n  isLogined: boolean;\r\n  captcha: string | undefined;\r\n  login: (data: {\r\n    email: string;\r\n    password: string;\r\n    rememberMe: boolean;\r\n    captcha: string | null;\r\n  }) => any;\r\n  getCaptcha: () => void;\r\n  auth: () => void;\r\n};\r\n\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n  const navigate = useNavigate();\r\n\r\n  const [captchaVisible, setCaptchaVisible] = useState(false);\r\n  const [serverError, setServerError] = useState<string | null>(null);\r\n  \r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm<FormValuesType>({});\r\n\r\n  useEffect(() => {\r\n    if (props.isLogined) {\r\n      navigate(\"/profile\");\r\n    }\r\n  }, [props.isLogined, navigate]);\r\n\r\n  const submit = (data) => {\r\n    setServerError(null); // Сбрасываем серверные ошибки\r\n    props.login(data).then((response) => {\r\n      if (response.data.resultCode === ResultCode.RequiredCaptcha) {\r\n        setCaptchaVisible(true);\r\n        props.getCaptcha();\r\n      }\r\n\r\n      if (response.data.resultCode === ResultCode.Success) {\r\n        navigate(\"/profile\");\r\n        props.auth();\r\n      } else {\r\n        setServerError(\"Неправильные учетные данные. Попробуйте еще раз.\"); // Пример обработки ошибки\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.content}>\r\n      <h3>Login</h3>\r\n      <form className={classes.form} onSubmit={handleSubmit(submit)}>\r\n        <TextField\r\n          error={!!errors.email}\r\n          id=\"outlined-basic\"\r\n          label=\"Email\"\r\n          variant=\"outlined\"\r\n          type=\"email\"\r\n          {...register(\"email\", { required: true })}\r\n        />\r\n        {errors.email && <p className={classes.error}>Это поле обязательно</p>}\r\n\r\n        <TextField\r\n          error={!!errors.password}\r\n          id=\"outlined-basic\"\r\n          label=\"Password\"\r\n          variant=\"outlined\"\r\n          type=\"password\"\r\n          {...register(\"password\", { required: true })}\r\n        />\r\n        {errors.password && <p className={classes.error}>Это поле обязательно</p>}\r\n\r\n        <FormGroup>\r\n          <FormControlLabel\r\n            label=\"Remember me \"\r\n            control={<Checkbox />}\r\n            {...register(\"rememberMe\")}\r\n          />\r\n        </FormGroup>\r\n\r\n        {captchaVisible ? (\r\n          <div className={classes.captcha}>\r\n            <img src={props.captcha} alt=\"Captcha\" />\r\n            <TextField\r\n              error={!!errors.captcha}\r\n              id=\"outlined-basic\"\r\n              label=\"Captcha\"\r\n              variant=\"outlined\"\r\n              {...register(\"captcha\", { required: true })}\r\n            />\r\n            {errors.captcha && <p className={classes.error}>Это поле обязательно</p>}\r\n          </div>\r\n        ) : null}\r\n\r\n        {serverError && <p className={classes.error}>{serverError}</p>}\r\n\r\n        <Button variant=\"contained\" type=\"submit\">\r\n          Submit\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    isLogined: state.login.isLogined,\r\n    captcha: state.login.captcha,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { auth, getCaptcha, login })(Login);"],"names":["connect","state","isLogined","login","captcha","auth","getCaptcha","props","navigate","useNavigate","captchaVisible","setCaptchaVisible","useState","serverError","setServerError","register","handleSubmit","formState","errors","useForm","useEffect","_jsxs","className","classes","content","children","_jsx","form","onSubmit","data","then","response","resultCode","ResultCode","RequiredCaptcha","Success","TextField","error","email","id","label","variant","type","required","password","FormGroup","FormControlLabel","control","Checkbox","src","alt","Button"],"sourceRoot":""}